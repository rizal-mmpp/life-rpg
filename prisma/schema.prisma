// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stats         Stats?
  quests        Quest[]
  habits        Habit[]
  achievements  Achievement[]
  activities    Activity[]
  skills        Skill[]
  points        Int           @default(0)
  level         Int           @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stats {
  id          String @id @default(cuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  health      Int    @default(100)
  energy      Int    @default(100)
  intelligence Int   @default(0)
  social      Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  xpReward    Int       @default(10)
  coinReward  Int       @default(5)
  dueDate     DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    String    @default("DAILY")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Habit {
  id          String    @id @default(cuid())
  title       String
  description String?
  streak      Int       @default(0)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastChecked DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String?
  icon        String?
  unlocked    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  xpChange    Int
  coinChange  Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  level       Int      @default(1)
  progress    Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
